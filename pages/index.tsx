import type { GetServerSideProps, NextPage } from "next";
import { Fragment, createElement, ReactNode } from "react";
import Head from "next/head";
import Image from "next/image";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";

import { getList } from "../lib/microcms";
import styles from "../styles/Home.module.css";

import { unified } from "unified";
import parse from "rehype-parse";
import rehypeReact from "rehype-react";
import { CustomParagraph } from "../components/CustomPragraph";
import { CustomH2 } from "../components/CustomH2";
import { CustomH3 } from "../components/CustomH3";
import { CustomTh } from "../components/CutomTh";
import { CustomTd } from "../components/CustomTd";
import { CustomTable } from "../components/CustomTable";
import { useForm } from "react-hook-form";

const parseHtml = (content: string) => {
  const htmlAst = unified()
    .use(parse, { fragment: true })
    .use(rehypeReact, {
      createElement,
      Fragment,
      components: {
        p: (props) => <CustomParagraph {...props} />,
        h2: (props) => <CustomH2 {...props} />,
        h3: (props) => <CustomH3 {...props} />,
        table: (props) => <CustomTable {...props} />,
        th: (props) => <CustomTh {...props} />,
        td: (props) => <CustomTd {...props} />,
      },
    })
    .processSync(content).result;
  return htmlAst;
};

// Yup
const schema = yup.object().shape({
  email: yup.string().email("有効なメールアドレスを入力してください"),
  password: yup.string().required("パスワードを入力してください"),
});
type Form = yup.InferType<typeof schema>;

type Props = {
  data: any
  children: ReactNode
}

const Home: NextPage<Props> = ({ data }: Props) => {
  const { register, handleSubmit } = useForm<Form>({
    resolver: yupResolver(schema),
  });
  const onSubmit = (submitData) => {
    console.log(submitData);
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>タイトル</h1>
        <section style={{ border: "solid blue 5px", padding: "0 20px" }}>
          <h2>ヘッダーバナーフィールド</h2>
          <h2>{data.carInsurance.title}</h2>
          <Image
            src={data.carInsurance.bgImage.url}
            height={data.carInsurance.bgImage.height}
            width={data.carInsurance.bgImage.width}
          />
          <p>{data.carInsurance.bodyText}</p>
        </section>
        <section
          style={{
            border: "solid green 5px",
            padding: "0 20px",
            margin: "30px 0",
          }}
        >
          <h2>目次のフィールド</h2>
          {parseHtml(data.contentIndex.textList)}
        </section>
        <h2>↓ ここから下が繰り返しフィールド</h2>
        {/* ↓ 繰り返しフィールドのコンテンツ */}
        {data.articleArea.map((content, index) => (
          <>
            {content.fieldId === "sentence-field" && (
              <section
                style={{
                  border: "solid red 5px",
                  padding: "0 20px",
                  margin: "30px 0",
                }}
              >
                {parseHtml(content.sentence)}
              </section>
            )}
            {content.fieldId === "aside-card" && (
              <section
                style={{
                  border: "solid green 5px",
                  padding: "0 20px",
                  margin: "30px 0",
                }}
              >
                <h2>{content.title}</h2>
                <p>iconLabel: {content.iconLabel}</p>
                {parseHtml(content.listField)}
              </section>
            )}
            {content.fieldId === "formList" &&
              content.form[0] === "shop-form" && (
                <section
                  style={{
                    border: "solid yellow 5px",
                    padding: "10px 20px",
                    margin: "30px 0",
                  }}
                >
                  <h2>ショップ用のフォーム</h2>
                  <form onSubmit={handleSubmit(onSubmit)}>
                    <div>
                      <label htmlFor="email">e-mail</label>
                      <input id="email" {...register("email")} />
                    </div>
                    <div>
                      <label htmlFor="password">Password</label>
                      <input
                        id="password"
                        {...register("password")}
                        type="password"
                      />
                    </div>
                    <button type="submit">送信</button>
                  </form>
                </section>
              )}
            {content.fieldId === "formList" &&
              content.form[0] === "satei-form" && (
                <section
                  style={{
                    border: "solid lightgreen 5px",
                    padding: "10px 20px",
                    margin: "30px 0",
                  }}
                >
                  <h2>査定用のフォーム</h2>
                  <form onSubmit={handleSubmit(onSubmit)}>
                    <div>
                      <label htmlFor="email">e-mail</label>
                      <input id="email" {...register("email")} />
                    </div>
                    <div>
                      <label htmlFor="password">Password</label>
                      <input
                        id="password"
                        {...register("password")}
                        type="password"
                      />
                    </div>
                    <button type="submit">送信</button>
                  </form>
                </section>
              )}
            {content.fieldId === "tables" && (
              <section>
                <h2>テーブルのフィールド</h2>
                {parseHtml(content.tabelField)}
              </section>
            )}
            {content.fieldId === "ctaList" &&
              content.ctaList[0] === "satei-cta" && (
                <section
                  style={{
                    border: "solid gray 5px",
                    padding: "10px 20px",
                    margin: "30px 0",
                  }}
                >
                  <h2>査定のCTA</h2>
                  <Image
                    src={data.carInsurance.bgImage.url}
                    height={300}
                    width={400}
                  />
                </section>
              )}
            {content.fieldId === "faqField" && (
              <section
                style={{
                  border: "solid orange 5px",
                  padding: "0 20px",
                  margin: "30px 0",
                }}
              >
                <h2>{content.h2Title}</h2>
                {parseHtml(content.FaqField)}
              </section>
            )}
            {content.fieldId === "htmlField" && (
              <section>
                <h2>テーブル(結合)のフィールド</h2>
                {parseHtml(content.htmlField)}
              </section>
            )}
          </>
        ))}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps = async () => {
  const data = await getList();
  return { props: { data: data } };
};
